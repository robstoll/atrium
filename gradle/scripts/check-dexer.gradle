def preCheck_ATRIUM_ANDROID_JAR = tasks.register('preCheck_ATRIUM_ANDROID_JAR') {
    doFirst {
        if (System.getenv('ATRIUM_ANDROID_JAR') == null) {
            throw new InvalidUserDataException("env variable ATRIUM_ANDROID_JAR not set. Point it to the android SDK android.jar path (e.g. /android-sdk-linux/platforms/android-26/android.jar")
        }
        println("Using android.jar defined at: ${System.getenv('ATRIUM_ANDROID_JAR')}")
    }
}

def prefixedProject(String name) {
    project(":${rootProject.name}-$name")
}


def dexerProjects = ["core",
                     "logic",
                     "translations-en_GB", "translations-de_CH",
                     "api-fluent",
                     "api-infix",
                     "fluent",
                     "infix",
                     "verbs",
                     "verbs-internal",].collect { prefixedProject(it) }
configure(dexerProjects) { subproject ->
    configurations {
        r8
        d8 {
            attributes {
                attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
                attribute(Attribute.of("org.jetbrains.kotlin.platform.type", String), "jvm")
            }
        }
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        // we could update it but in the end I think it is actually good that we use an old version
        // this way we know that it even works with an old one
        r8 "com.android.tools:r8:8.2.42"
        d8 subproject
    }

    tasks.register('checkDexer', JavaExec) {
        description('compiles android class files into dex bytecode')
        inputs.property 'ATRIUM_ANDROID_JAR', System.getenv('ATRIUM_ANDROID_JAR')

        def outputPath = "${subproject.buildDir}/d8"
        outputs.dir(outputPath)
        dependsOn(jvmJar)
        dependsOn(preCheck_ATRIUM_ANDROID_JAR)
        jvmJar.mustRunAfter(preCheck_ATRIUM_ANDROID_JAR)

        classpath(subproject.configurations.r8.asPath)

        mainClass.set("com.android.tools.r8.D8")


        def d8Classpath = subproject.configurations.d8.files.collect {
            ["--classpath", it.getAbsolutePath()]
        }.flatten()

        def androidJarPath = System.getenv('ATRIUM_ANDROID_JAR')

        // ATRIUM_ANDROID_JAR has to point to something like /android-sdk-linux/platforms/android-XY/android.jar
        // where Xy is the version we want to support
        def androidJar = androidJarPath != null ? ['--lib', file(androidJarPath).absolutePath] : []

        args = d8Classpath + androidJar + ['--output', outputPath, jvmJar.archiveFile.get().asFile]

        def oldStream = errorOutput
        def outputWritten = false
        errorOutput = new OutputStream() {
            @Override
            void write(int b) {
                outputWritten = true
                if (oldStream != null) {
                    oldStream.write(b)
                } else {
                    System.out.write(b)
                }
            }
        }
        doLast {
            if (outputWritten) {
                throw new GradleException("checkDexer failed due to output, see above.")
            }
        }
    }

}
def preCheckDexerProjects = tasks.register('preCheckDexerProjects') {
    dependsOn(preCheck_ATRIUM_ANDROID_JAR)
    doFirst {
        if (dexerProjects.size() == 0) {
            throw new InvalidUserDataException("No dexerProjects defined. Make sure you have specified env variable CI. Use e.g. `CI=true ./gradlew checkDexer`")
        }
    }
}
tasks.register('checkDexer') {
    def self = it
    description('executes all checkDexer tasks')
    dependsOn('preCheckDexerProjects')

    dexerProjects.forEach { subproject ->
        def subprojectCheckDexer = subproject.tasks.named("checkDexer")
        self.dependsOn(subprojectCheckDexer)
        subprojectCheckDexer.configure {
            mustRunAfter(preCheckDexerProjects)
        }
    }
}
